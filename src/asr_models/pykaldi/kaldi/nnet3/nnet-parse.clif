from "base/iostream-clifwrap.h" import *
from "base/sstream-clifwrap.h" import *
from "matrix/kaldi-vector-clifwrap.h" import *
from "cudamatrix/cu-vector-clifwrap.h" import *
from "cudamatrix/cu-matrix-clifwrap.h" import *
from "util/text-utils-clifwrap.h" import *

from "nnet3/nnet-parse.h":
  namespace `kaldi::nnet3`:

    # ParseFromString

    def `DescriptorTokenize` as descriptor_tokenize(input: str) -> (suc: bool, tokens: list<str>)

#    def `IsValidName` as is_valid_name(name: str) -> bool

#    def `ReadConfigLines` as read_config_lines(is: istream) -> list<str>

#    def `ParseConfigLines` as parse_config_lines(lines: list<str>) -> list<ConfigLine>

    # NameMatchesPattern

    def `ErrorContext` as error_context_from_stream(is: istream) -> str

    def `ErrorContext` as error_context(str: str) -> str

    def `SummarizeVector` as summarize_vector(vec: VectorBase) -> str

    def `SummarizeVector` as summarize_double_vector(vec: DoubleVectorBase) -> str

    def `SummarizeVector` as summarize_cu_vector(vec: CuVectorBase) -> str

    def `PrintParameterStats` as print_parameter_vector_stats(
        os: ostringstream, name: str, params: CuVectorBase,
        include_mean: bool = default)

    def `PrintParameterStats` as print_parameter_matrix_stats(
        os: ostringstream, name: str, params: CuMatrix,
        include_mean: bool = default, include_row_norms: bool = default,
        include_column_norms: bool = default, include_singular_values: bool = default)
